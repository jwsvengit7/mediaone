package com.example.test.ServiceImpl;import com.example.test.Config.JwtService;import com.example.test.Config.UserDetailsID;import com.example.test.Entity.Token;import com.example.test.Entity.User;import com.example.test.Entity.VerifyToken;import com.example.test.Enums.Role;import com.example.test.Exceptions.EmailAddressAlreadyExistException;import com.example.test.Repositories.TokenRepository;import com.example.test.Repositories.UserRepository;import com.example.test.Repositories.VerifyRepository;import com.example.test.Request.RegisterRequest;import com.example.test.Request.UserDTO;import com.example.test.Request.UserRequest;import com.example.test.Response.Response;import com.example.test.Services.UserService;import com.example.test.Token.TokenType;import com.fasterxml.jackson.databind.ObjectMapper;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import jakarta.transaction.Transactional;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.modelmapper.ModelMapper;import org.springframework.http.HttpHeaders;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Service;import java.io.IOException;import java.util.List;import java.util.UUID;@Service    @Slf4j    @RequiredArgsConstructor    public class UserServiceImplentation implements UserService {        private final UserRepository repository;        private final TokenRepository tokenRepository;        private final PasswordEncoder passwordEncoder;        private final VerifyRepository verifyRepository;        private final JwtService jwtService;        private final AuthenticationManager authenticationManager;        private final EmailSenderImplementation emailSenderImplementation;        private final ModelMapper modelMapper;        private final TokenServiceImpl tokenService;        @Override        @Transactional(rollbackOn = Exception.class)        public Response register(RegisterRequest request) {         User user =repository.findUsersByEmail(request.getEmail());         if(user!=null && user.isActivate()){             throw new EmailAddressAlreadyExistException("EMAIL ALREADY EXIST");         }          else if(user!=null && !user.isActivate()) {             user.setEmail(request.getEmail());             user.setUsername(request.getUsername());             user.setRole(Role.USER);             user.setPassword(passwordEncoder.encode(request.getPassword()));                return createAndValidate(user);            }         else {                 User newUser = User.builder()                         .email(request.getEmail())                         .password(passwordEncoder.encode(request.getPassword()))                         .role(Role.USER)                         .username(request.getUsername())                         .activate(false)                         .build();                 System.out.println(newUser);                 return createAndValidate(newUser);             }        }        @Override        public Response createAndValidate(User user){            User savedUser = repository.save(user);            String tokenGenerated = UUID.randomUUID().toString();            VerifyToken verifyToken = new VerifyToken(tokenGenerated, savedUser);            verifyRepository.save(verifyToken);            emailSenderImplementation.sendEmail(tokenGenerated, savedUser.getEmail());            return Response.builder()                    .accessToken(tokenGenerated)                    .message("SUCCESS")                    .data(modelMapper.map(user, UserDTO.class))                    .build();        }        @Override        @Transactional(rollbackOn = Exception.class)        public Response authenticate(UserRequest request) {            authenticationManager.authenticate(                    new UsernamePasswordAuthenticationToken(                            request.getEmail(),                            request.getPassword()                    )            );            User user = repository.findByEmail(request.getEmail())                    .orElseThrow(()->{                      throw new RuntimeException("INVALID DETAILS");                    });            if(!user.isActivate()){                throw  new RuntimeException("ERROR");            }else {                String jwtToken = jwtService.generateToken(user);                String refreshToken = jwtService.generateRefreshToken(user);                tokenService.revokeAllUserTokens(user);                tokenService.saveUserToken(user, jwtToken);                return Response.builder()                        .accessToken(jwtToken)                        .refreshToken(refreshToken)                        .message("SUCCESS")                        .data(user)                        .build();            }        }    }