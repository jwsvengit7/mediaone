package com.example.test.Controllers;import com.example.test.Config.UserDetailsID;import com.example.test.Entity.Post;import com.example.test.Request.PostDTO;import com.example.test.Response.Response;import com.example.test.ServiceImpl.PostServiceImplemtation;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;@RequiredArgsConstructor@RequestMapping("api/v1/post")@RestController@Slf4jpublic class PostController {    private final PostServiceImplemtation postService;    @PostMapping("/add")    @CrossOrigin(origins = "http://localhost:3000")    public ResponseEntity<Response> addPost(@RequestBody PostDTO postDTO){      PostDTO postDTO1 = postService.addPost(postDTO,UserDetailsID.getEmail());        return  ResponseEntity.ok().body(                Response.builder().                        data(postDTO1)                        .message("post")                        .build()        );    }    @PutMapping("{postId:[\\d]+}")    @CrossOrigin(origins = "http://localhost:3000")    public ResponseEntity<Response<PostDTO>> updatePost(@RequestBody PostDTO request,@PathVariable Long postId) {       var authorId = postService.updatePost(request,postId,UserDetailsID.getEmail());        return ResponseEntity.status(HttpStatus.FORBIDDEN).body(                Response.<PostDTO>builder()                        .message((authorId!=null)?"You Can Update":"You are not the author of this post")                        .build()        );    }    @DeleteMapping("delete/{postid}")    @CrossOrigin(origins = "http://localhost:3000")    public ResponseEntity<Object> delete(@PathVariable("postid") Long postid){     postService.deletePost(postid, UserDetailsID.getEmail());        return new ResponseEntity<>("DELETED",HttpStatus.GONE);    }    @GetMapping("/allPost")    @CrossOrigin(origins = "http://localhost:3000")    public ResponseEntity<Response> getAll(){        List<Post> post = postService.getAllPost();        return ResponseEntity.status(HttpStatus.OK).body(                Response.builder()                        .message("SUCCESS")                        .data(post).build()        );    }}