package com.example.test.Controllers;import com.example.test.Entity.Post;import com.example.test.Request.PostDTO;import com.example.test.Response.ApiResponse;import com.example.test.ServiceImpl.PostServiceImplemtation;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.web.bind.annotation.*;import java.util.List;@RequiredArgsConstructor@RequestMapping("api/v1/post")@RestController@Slf4j@CrossOrigin("localhost:3000")public class PostController {    private final PostServiceImplemtation postService;    @PostMapping("/add")    public ResponseEntity<ApiResponse> addPost(@RequestBody PostDTO postDTO){        log.info("------{}", SecurityContextHolder.getContext().getAuthentication());        UserDetails userDetails = (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();        PostDTO postDTO1 = postService.addPost(postDTO,userDetails.getUsername());        return  ResponseEntity.ok().body(                ApiResponse.builder().                        data(postDTO1)                        .message("post")                        .object(postDTO1)                        .build()        );    }    @PutMapping("{postId:[\\d]+}")    public ResponseEntity<ApiResponse<PostDTO>> updatePost(@RequestBody PostDTO request,@PathVariable Long postId) {        UserDetails userDetails = (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();        var authorId = postService.updatePost(request,postId,userDetails.getUsername());        return ResponseEntity.status(HttpStatus.FORBIDDEN).body(                ApiResponse.<PostDTO>builder()                        .message((authorId!=null)?"You Can Update":"You are not the author of this post")                        .status(HttpStatus.FORBIDDEN)                        .build()        );    }    @DeleteMapping("delete/{postid}")    public ResponseEntity<Object> delete(@PathVariable("postid") Long postid){        UserDetails userDetails = (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();        postService.deletePost(postid,userDetails.getUsername());        return new ResponseEntity<>("DELETED",HttpStatus.GONE);    }    @GetMapping("/allPost")    public ResponseEntity<ApiResponse> getAll(){        List<Post> post = postService.getAllPost();        return ResponseEntity.status(HttpStatus.OK).body(                ApiResponse.builder()                        .message("SUCCESS")                        .data(post)                        .status(HttpStatus.CONTINUE).build()        );    }}