package com.example.test.ServiceImpl;import com.example.test.Entity.Post;import com.example.test.Entity.User;import com.example.test.Repositories.PostRepository;import com.example.test.Repositories.UserRepository;import com.example.test.Request.PostDTO;import com.example.test.Services.PostService;import jakarta.transaction.Transactional;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.modelmapper.ModelMapper;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.stereotype.Service;import java.util.List;@RequiredArgsConstructor@Service@Slf4jpublic class PostServiceImplemtation implements PostService {    private final PostRepository postRepository;    private final UserRepository userRepository;    private final ModelMapper modelMapper;    @Transactional    public PostDTO addPost(PostDTO postDTO, String email){            User user  = userRepository.findByEmail(email).orElse(null);        if (user!=null){            Post post = Post.builder()                    .message(postDTO.getMessage())                    .title(postDTO.getTitle())                    .content(postDTO.getContent())                    .user(getLoggedInUser())                    .build();           return modelMapper.map(postRepository.save(post),PostDTO.class);        }else{            throw new RuntimeException("Error to post");        }    }    @Override    public User getLoggedInUser(){        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();        String name = authentication.getName();        return userRepository.findByEmail(name).orElse(null);    }    @Override    public PostDTO updatePost(PostDTO postRequestDTO, Long id,String email) {        Post post = postRepository.findById(id).orElseThrow(() -> {            throw new RuntimeException("Error Loading");        });        User user = userRepository.findByEmail(email).orElseThrow(() -> {            throw new RuntimeException("Error Loading");        });        post.setMessage(postRequestDTO.getMessage());        post.setTitle(postRequestDTO.getTitle());        post.setContent(postRequestDTO.getContent());        post.setUser(user);        return modelMapper.map(postRepository.save(post),PostDTO.class);    }    @Override    public void deletePost(Long id,String email) {        Post post = postRepository.findById(id).orElseThrow(() -> {            throw new RuntimeException("Error");        });        User user = userRepository.findByEmail(email).orElseThrow(() -> {            throw new RuntimeException("Error Loading");        });        postRepository.delete(post);    }    @Override    public List<Post> getAllPost(){        return postRepository.findAll();    }}